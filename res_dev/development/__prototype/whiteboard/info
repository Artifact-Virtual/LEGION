A data analysis chat that helps you scan gits.

  * "Upload" code by pasting it into a text area.
  * Ask questions about the "uploaded" code using a chat interface.
  * See simulated metrics and charts related to code analysis.

The "deep context" analysis is simulated by sending your pasted code snippets and questions to the Gemini API, which can provide high-level summaries and insights.

```react
import React, { useState, useEffect } from 'react';
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell
} from 'recharts';

// Function to call the Gemini API
async function callGeminiAPI(prompt, codeSnippet = '') {
  let chatHistory = [];
  if (codeSnippet) {
    chatHistory.push({ role: "user", parts: [{ text: `Analyze the following code snippet:\n\`\`\`\n${codeSnippet}\n\`\`\`\n\nUser's question: ${prompt}` }] });
  } else {
    chatHistory.push({ role: "user", parts: [{ text: prompt }] });
  }

  const payload = { contents: chatHistory };
  const apiKey = ""; // API key will be provided by the Canvas environment
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Gemini API error:", errorData);
      throw new Error(`Gemini API returned status ${response.status}: ${errorData.error.message}`);
    }

    const result = await response.json();
    if (result.candidates && result.candidates.length > 0 &&
      result.candidates[0].content && result.candidates[0].content.parts &&
      result.candidates[0].content.parts.length > 0) {
      return result.candidates[0].content.parts[0].text;
    } else {
      console.warn("Gemini API response structure unexpected:", result);
      return "I couldn't get a clear response from the AI. Please try again.";
    }
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return `Failed to connect to AI: ${error.message}. Please check your network or API key.`;
  }
}

// Mock data for charts and metrics
const mockMetrics = {
  totalFiles: 125,
  totalLines: 85432,
  mockErrors: 15,
  githubStars: 12345,
  githubForks: 2134,
  githubLastCommit: "2 days ago",
  languages: [
    { name: 'JavaScript', lines: 35000 },
    { name: 'Python', lines: 25000 },
    { name: 'HTML/CSS', lines: 15000 },
    { name: 'Java', lines: 10000 },
    { name: 'Others', lines: 432 },
  ],
  fileTypes: [
    { name: '.js', count: 50 },
    { name: '.py', count: 30 },
    { name: '.html', count: 15 },
    { name: '.css', count: 10 },
    { name: '.md', count: 8 },
    { name: '.json', count: 7 },
    { name: 'Others', count: 5 },
  ]
};

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#FF19A3', '#19FFD4'];

// Main App Component
const App = () => {
  const [chatMessages, setChatMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [codeSnippet, setCodeSnippet] = useState('');
  const [loading, setLoading] = useState(false);
  const [showMetrics, setShowMetrics] = useState(true); // State to toggle between chat and metrics

  const handleSendMessage = async () => {
    if (inputValue.trim() === '') return;

    const userMessage = { text: inputValue, sender: 'user' };
    setChatMessages((prevMessages) => [...prevMessages, userMessage]);
    setInputValue('');
    setLoading(true);

    try {
      const aiResponse = await callGeminiAPI(inputValue, codeSnippet);
      const aiMessage = { text: aiResponse, sender: 'ai' };
      setChatMessages((prevMessages) => [...prevMessages, aiMessage]);
    } catch (error) {
      const errorMessage = { text: `Error: ${error.message}`, sender: 'ai' };
      setChatMessages((prevMessages) => [...prevMessages, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  const handleCodeSnippetChange = (e) => {
    setCodeSnippet(e.target.value);
  };

  // Scroll to the bottom of the chat window
  useEffect(() => {
    const chatWindow = document.getElementById('chat-window');
    if (chatWindow) {
      chatWindow.scrollTop = chatWindow.scrollHeight;
    }
  }, [chatMessages]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 font-inter text-gray-800 p-4 sm:p-6 lg:p-8 flex flex-col items-center">
      <h1 className="text-4xl sm:text-5xl font-extrabold text-indigo-700 mb-6 text-center drop-shadow-lg">
        Codebase Insight Chat
      </h1>

      {/* Toggle Buttons */}
      <div className="flex space-x-4 mb-8">
        <button
          onClick={() => setShowMetrics(true)}
          className={`px-6 py-3 rounded-full text-lg font-semibold transition-all duration-300 ease-in-out ${
            showMetrics ? 'bg-indigo-600 text-white shadow-lg' : 'bg-white text-indigo-700 hover:bg-indigo-50 hover:text-indigo-800 shadow'
          }`}
        >
          Metrics & Charts
        </button>
        <button
          onClick={() => setShowMetrics(false)}
          className={`px-6 py-3 rounded-full text-lg font-semibold transition-all duration-300 ease-in-out ${
            !showMetrics ? 'bg-indigo-600 text-white shadow-lg' : 'bg-white text-indigo-700 hover:bg-indigo-50 hover:text-indigo-800 shadow'
          }`}
        >
          AI Chat
        </button>
      </div>

      <div className="w-full max-w-7xl bg-white rounded-3xl shadow-xl flex flex-col lg:flex-row overflow-hidden border border-indigo-200">
        {/* Left Panel: File Upload Simulation / Chat Input */}
        <div className="w-full lg:w-1/3 p-6 bg-indigo-50 border-r border-indigo-100 flex flex-col">
          <h2 className="text-2xl font-bold text-indigo-800 mb-4">Code Snippet Input</h2>
          <textarea
            className="w-full h-48 p-4 border border-indigo-300 rounded-xl resize-none focus:ring-2 focus:ring-indigo-400 focus:border-transparent outline-none text-sm font-mono bg-white shadow-inner mb-4"
            placeholder="Paste your code snippet here for analysis (e.g., a function, a class, or a small file content).&#10;&#10;Due to the nature of this demo, direct file uploads (zip, Google Drive, GitHub) are not supported, but you can paste code content."
            value={codeSnippet}
            onChange={handleCodeSnippetChange}
          ></textarea>
          <p className="text-sm text-gray-600 mb-4">
            *In a full application, this section would handle direct file uploads (ZIP, Google Drive, GitHub) for comprehensive codebase analysis. Here, we simulate by pasting content.
          </p>
        </div>

        {/* Right Panel: Chat Interface or Metrics Display */}
        <div className="w-full lg:w-2/3 flex flex-col">
          {showMetrics ? (
            <div className="p-6 flex-grow overflow-y-auto">
              <h2 className="text-2xl font-bold text-indigo-800 mb-4">Codebase Metrics</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                {Object.entries(mockMetrics).map(([key, value]) => {
                  if (typeof value === 'number' || typeof value === 'string') {
                    return (
                      <div key={key} className="bg-purple-50 p-4 rounded-xl shadow border border-purple-200">
                        <p className="text-sm font-medium text-purple-700">{key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</p>
                        <p className="text-3xl font-bold text-purple-800 mt-1">{value}</p>
                      </div>
                    );
                  }
                  return null;
                })}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="bg-blue-50 p-4 rounded-xl shadow border border-blue-200">
                  <h3 className="text-lg font-semibold text-blue-800 mb-4">Lines of Code by Language</h3>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={mockMetrics.languages} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>
                      <XAxis dataKey="name" tick={{ fill: '#4B5563' }} />
                      <YAxis tick={{ fill: '#4B5563' }} />
                      <Tooltip cursor={{ fill: 'transparent' }} />
                      <Legend />
                      <Bar dataKey="lines" fill="#6366F1" className="rounded-t-lg" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>

                <div className="bg-green-50 p-4 rounded-xl shadow border border-green-200">
                  <h3 className="text-lg font-semibold text-green-800 mb-4">File Types Distribution</h3>
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={mockMetrics.fileTypes}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={120}
                        fill="#8884d8"
                        dataKey="count"
                        label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                      >
                        {mockMetrics.fileTypes.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>
              <p className="text-sm text-gray-600 mt-4">
                *These metrics and charts are currently based on mock data to demonstrate the visualization capabilities.
              </p>
            </div>
          ) : (
            <div className="flex flex-col flex-grow bg-white rounded-br-3xl p-6">
              <div id="chat-window" className="flex-grow overflow-y-auto p-4 space-y-4 bg-gray-50 rounded-xl shadow-inner border border-gray-200">
                {chatMessages.length === 0 && (
                  <div className="text-center text-gray-500 py-10">
                    <p className="mb-2">Start a conversation!</p>
                    <p>Try asking: "Summarize this code," or "What are the potential issues in this snippet?"</p>
                  </div>
                )}
                {chatMessages.map((msg, index) => (
                  <div
                    key={index}
                    className={`flex ${
                      msg.sender === 'user' ? 'justify-end' : 'justify-start'
                    }`}
                  >
                    <div
                      className={`max-w-3/4 p-3 rounded-2xl shadow-md ${
                        msg.sender === 'user'
                          ? 'bg-indigo-500 text-white rounded-br-none'
                          : 'bg-gray-200 text-gray-800 rounded-bl-none'
                      }`}
                    >
                      {msg.text}
                    </div>
                  </div>
                ))}
                {loading && (
                  <div className="flex justify-start">
                    <div className="max-w-3/4 p-3 rounded-2xl bg-gray-200 text-gray-800 rounded-bl-none shadow-md">
                      <div className="dot-pulse"></div>
                    </div>
                  </div>
                )}
              </div>

              {/* Chat Input */}
              <div className="mt-6 flex items-center gap-3">
                <input
                  type="text"
                  className="flex-grow px-5 py-3 border border-indigo-300 rounded-full focus:ring-2 focus:ring-indigo-400 focus:border-transparent outline-none text-base placeholder-gray-500 shadow-sm"
                  placeholder="Ask about the code or workspace..."
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  disabled={loading}
                />
                <button
                  onClick={handleSendMessage}
                  className="bg-indigo-600 text-white p-3 rounded-full hover:bg-indigo-700 transition-colors duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={loading}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        .font-inter {
          font-family: 'Inter', sans-serif;
        }

        /* Dot Pulse Loading Animation */
        .dot-pulse {
          position: relative;
          width: 10px;
          height: 10px;
          border-radius: 5px;
          background-color: #6B7280; /* gray-500 */
          color: #6B7280; /* gray-500 */
          animation: dotPulse 1.5s infinite ease-in-out;
        }

        .dot-pulse::before, .dot-pulse::after {
          content: '';
          display: inline-block;
          position: absolute;
          top: 0;
          width: 10px;
          height: 10px;
          border-radius: 5px;
          background-color: #6B7280; /* gray-500 */
          color: #6B7280; /* gray-500 */
        }

        .dot-pulse::before {
          left: -15px;
          animation: dotPulseLeft 1.5s infinite ease-in-out;
        }

        .dot-pulse::after {
          right: -15px;
          animation: dotPulseRight 1.5s infinite ease-in-out;
        }

        @keyframes dotPulse {
          0% { transform: scale(0.8); opacity: 0.7; }
          50% { transform: scale(1); opacity: 1; }
          100% { transform: scale(0.8); opacity: 0.7; }
        }

        @keyframes dotPulseLeft {
          0% { transform: translateX(0px); opacity: 0.7; }
          50% { transform: translateX(15px); opacity: 1; }
          100% { transform: translateX(0px); opacity: 0.7; }
        }

        @keyframes dotPulseRight {
          0% { transform: translateX(0px); opacity: 0.7; }
          50% { transform: translateX(-15px); opacity: 1; }
          100% { transform: translateX(0px); opacity: 0.7; }
        }
      `}</style>
    </div>
  );
};

export default App;
```

\</immersive\>

This application provides a foundation for your "Codebase Insight Chat" app.

**Here's a summary of what's included and how it works:**

  * **React Structure:** A single `App` component written in React, using functional components and hooks.
  * **Tailwind CSS:** Fully styled with Tailwind CSS for a modern, responsive, and visually appealing design.
  * **Chat Interface:** A conversational UI where users can input text and receive responses.
  * **Code Snippet Input:** A text area where you can paste code snippets to simulate file uploads for analysis.
  * **Gemini API Integration:** The `callGeminiAPI` function demonstrates how to make a `fetch` call to the `gemini-2.0-flash` model. When you type a message and have code in the snippet input, both are sent to the AI for a combined response.
  * **Mock Metrics & Charts:**
      * Pre-defined mock data simulates codebase statistics (total files, lines, errors, GitHub stats).
      * `Recharts` is used to render interactive bar and pie charts, showcasing lines of code by language and file type distribution.
  * **Toggle View:** Buttons to switch between the "Metrics & Charts" view and the "AI Chat" view.
  * **Loading Indicator:** A simple "dot-pulse" animation indicates when the AI is processing a request.

**Next Steps & Potential Improvements:**

1.  **True File Upload and Parsing:**

      * Implement actual file reading using `FileReader` for local files.
      * For ZIP, Google Drive, and GitHub, you'd need a **backend server** to handle authentication, API calls (e.g., GitHub API, Google Drive API), file extraction, and parsing. This is a significant undertaking beyond a client-side demo.
      * Once files are "uploaded" (or their content extracted), you'd need a robust **code parser** (e.g., using ANTLR, Tree-sitter, or existing language-specific parsers on the backend) to build an Abstract Syntax Tree (AST) for truly deep, line-by-line analysis.

2.  **Advanced Code Analysis with AI and Tools:**

      * **Backend Processing:** Send parsed code chunks or relevant sections to the Gemini API on your backend (using Firebase AI Logic or a custom server) for more detailed analysis.
      * **Function Calling/Tool Use:** Explore Gemini's function calling capabilities. You could define tools that allow the AI to "run" static analysis checks (on a sandboxed environment), fetch real GitHub data, or query a code-specific knowledge base.
      * **Error Detection:** Integrate static analysis tools (e.g., ESLint for JS, Pylint for Python) on the backend to detect actual errors and vulnerabilities, then feed these results to the AI for summarization and suggestions.

3.  **Real-time GitHub Integration:**

      * To get "exhaustive GitHub stats," you would need to integrate with the GitHub API (requires user authentication, OAuth) to fetch repository details, commit history, contributors, issues, pull requests, etc.

4.  **Interactive Charts & Metrics:**

      * Connect the charts to *real* analysis data generated from the uploaded code.
      * Add more chart types (e.g., line graphs for code growth over time, treemaps for file size distribution, dependency graphs).

5.  **User Authentication & Data Persistence:**

      * If you want users to have their own workspaces and save analysis results, you'll need a database (like Firestore) and user authentication (Firebase Authentication).

This application gives you a strong starting point and visually demonstrates the concept. The truly "deep context" and comprehensive analysis features would be built incrementally on top of this UI with significant backend development.
import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import { FiCloud, FiSun, FiWind, FiDroplet, FiThermometer, FiEye, FiCloudRain } from 'react-icons/fi';

const WeatherDashboard = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [forecast, setForecast] = useState([]);
  const [city, setCity] = useState('London');
  const [loading, setLoading] = useState(true);

  // Use environment variable or backend proxy for API key
  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY || 'c17f641de2bc99e8b18a028607e044d5';

  useEffect(() => {
    fetchWeatherData();
  }, [city]);

  const fetchWeatherData = async () => {
    setLoading(true);
    try {
      // Current weather
      const currentResponse = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`
      );
      const currentData = await currentResponse.json();

      // 5-day forecast
      const forecastResponse = await fetch(
        `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`
      );
      const forecastData = await forecastResponse.json();

      if (currentResponse.ok && forecastResponse.ok) {
        setWeatherData({
          current: {
            temp: Math.round(currentData.main.temp),
            feels_like: Math.round(currentData.main.feels_like),
            humidity: currentData.main.humidity,
            pressure: currentData.main.pressure,
            description: currentData.weather[0].description,
            icon: currentData.weather[0].icon,
            wind_speed: currentData.wind.speed,
            visibility: currentData.visibility / 1000, // Convert to km
            uv_index: 0 // UV index not available in free tier
          }
        });

        // Process forecast data
        const processedForecast = forecastData.list.slice(0, 8).map(item => ({
          time: new Date(item.dt * 1000).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),
          temp: Math.round(item.main.temp),
          description: item.weather[0].description,
          icon: item.weather[0].icon,
          humidity: item.main.humidity,
          wind_speed: item.wind.speed
        }));
        setForecast(processedForecast);
      } else {
        throw new Error('Failed to fetch weather data');
      }
    } catch (error) {
      console.error('Weather fetch error:', error);
      // Fallback to demo data if API fails
      setWeatherData({
        current: {
          temp: 22,
          feels_like: 24,
          humidity: 65,
        wind_speed: 12,
        weather: [{ main: 'Clouds', description: 'scattered clouds', icon: '03d' }],
        visibility: 10000,
        pressure: 1013
      },
      forecast: [
        { day: 'Today', temp_max: 24, temp_min: 18, weather: 'Cloudy', icon: '03d' },
        { day: 'Tomorrow', temp_max: 26, temp_min: 20, weather: 'Sunny', icon: '01d' },
        { day: 'Wed', temp_max: 23, temp_min: 17, weather: 'Rainy', icon: '10d' },
        { day: 'Thu', temp_max: 25, temp_min: 19, weather: 'Partly Cloudy', icon: '02d' },
        { day: 'Fri', temp_max: 27, temp_min: 21, weather: 'Sunny', icon: '01d' }
      ]
    };

    setWeatherData(mockWeatherData.current);
    setForecast(mockWeatherData.forecast);
    setLoading(false);
  }, [city]);

  const getWeatherIcon = (iconCode) => {
    switch (iconCode) {
      case '01d': case '01n': return <FiSun className="w-8 h-8 text-yellow-400" />;
      case '02d': case '02n': case '03d': case '03n': case '04d': case '04n': 
        return <FiCloud className="w-8 h-8 text-gray-400" />;
      case '09d': case '09n': case '10d': case '10n': 
        return <FiCloudRain className="w-8 h-8 text-blue-400" />;
      default: return <FiCloud className="w-8 h-8 text-gray-400" />;
    }
  };

  if (loading) {
    return (
      <div className="bg-black border border-gray-800 rounded-lg p-6 h-96 flex items-center justify-center">
        <div className="text-white">Loading weather data...</div>
      </div>
    );
  }

  return (
    <div className="bg-black border border-gray-800 rounded-lg shadow-2xl p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-bold text-white flex items-center gap-2">
          <FiCloud className="w-6 h-6 text-blue-400" />
          Weather Dashboard
        </h3>
        <select
          value={city}
          onChange={(e) => setCity(e.target.value)}
          className="bg-gray-900 border border-gray-700 rounded px-3 py-2 text-white text-sm"
        >
          <option value="London">London</option>
          <option value="New York">New York</option>
          <option value="Tokyo">Tokyo</option>
          <option value="Sydney">Sydney</option>
          <option value="Dubai">Dubai</option>
        </select>
      </div>

      {weatherData && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Current Weather */}
          <div className="bg-gradient-to-br from-blue-900 to-purple-900 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h4 className="text-white text-lg font-semibold">{city}</h4>
                <p className="text-gray-300 text-sm">{new Date().toLocaleDateString()}</p>
              </div>
              {getWeatherIcon(weatherData.weather[0]?.icon)}
            </div>
            
            <div className="flex items-center gap-4 mb-4">
              <div className="text-4xl font-bold text-white">{Math.round(weatherData.temp)}째C</div>
              <div>
                <p className="text-gray-300">Feels like {Math.round(weatherData.feels_like)}째C</p>
                <p className="text-gray-300 capitalize">{weatherData.weather[0]?.description}</p>
              </div>
            </div>

            <div className="grid grid-cols-3 gap-4">
              <div className="flex items-center gap-2">
                <FiWind className="w-4 h-4 text-gray-400" />
                <div>
                  <p className="text-xs text-gray-400">Wind</p>
                  <p className="text-white text-sm">{weatherData.wind_speed} km/h</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <FiDroplet className="w-4 h-4 text-gray-400" />
                <div>
                  <p className="text-xs text-gray-400">Humidity</p>
                  <p className="text-white text-sm">{weatherData.humidity}%</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <FiThermometer className="w-4 h-4 text-gray-400" />
                <div>
                  <p className="text-xs text-gray-400">Pressure</p>
                  <p className="text-white text-sm">{weatherData.pressure} hPa</p>
                </div>
              </div>
            </div>
          </div>

          {/* 5-Day Forecast */}
          <div className="bg-gray-900 border border-gray-800 rounded-lg p-6">
            <h4 className="text-white font-semibold mb-4">5-Day Forecast</h4>
            <div className="space-y-3">
              {forecast.map((day, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                  <div className="flex items-center gap-3">
                    {getWeatherIcon(day.icon)}
                    <div>
                      <p className="text-white font-medium">{day.day}</p>
                      <p className="text-gray-400 text-sm">{day.weather}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-white">{day.temp_max}째</p>
                    <p className="text-gray-400 text-sm">{day.temp_min}째</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Weather Alerts */}
      <div className="mt-6 bg-gray-900 border border-gray-800 rounded-lg p-4">
        <h4 className="text-white font-semibold mb-3">Weather Insights</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="flex items-center gap-2 p-3 bg-green-900/30 border border-green-700 rounded-lg">
            <FiSun className="w-5 h-5 text-green-400" />
            <div>
              <p className="text-green-400 text-sm">UV Index</p>
              <p className="text-white">Moderate (6)</p>
            </div>
          </div>
          <div className="flex items-center gap-2 p-3 bg-blue-900/30 border border-blue-700 rounded-lg">
            <FiDroplet className="w-5 h-5 text-blue-400" />
            <div>
              <p className="text-blue-400 text-sm">Air Quality</p>
              <p className="text-white">Good (42 AQI)</p>
            </div>
          </div>
          <div className="flex items-center gap-2 p-3 bg-purple-900/30 border border-purple-700 rounded-lg">
            <FiWind className="w-5 h-5 text-purple-400" />
            <div>
              <p className="text-purple-400 text-sm">Visibility</p>
              <p className="text-white">{(weatherData.visibility / 1000).toFixed(1)} km</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WeatherDashboard;
